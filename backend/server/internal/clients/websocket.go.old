package clients

import(
	"fmt"
	"log"
	"net/http"

	"server/internal/server"

	"github.com/gorilla/websocket"
	"google.golang.org/protobuf/proto"
)

type WebSocketClient struct {
	id		uint64
	conn	*websocket.Conn
	hub		*server.Hub
	sendChan chan *packets.Packet
	logger	*log.Logger
}

func NewWebSocketClient(hub *sever.Hub, writer http.ResponseWriter, request *http.Request) (server.ClientInterfacer, err) {
	upgrader := websocket.Upgrader{
		ReadBufferSize: 1024,
		WriteBufferSize: 1024,
		CheckOrigin: func(_ *http.Request) bool {return true},
	}

	conn, err := upgrader.Upgrade(writer, request, nil)

	if err != nil {
		return nil, err
	}

	c := &WebSocket{
		hub:		hub,
		conn:		conn,
		sendChan:	make(chan *packets.Packet, 256),
		logger:		log.New(log.Writer(), "Client unkown:", log.LstdFlags),
	}

	return c, nil
}

func (c *WebSocketClient) Id() uint64 {
	return c.id
}

func (c *WebSocketClient) ProcessMessage(senderId uint64, message packets.Msg) {

}

func (c *WebSocketClient) Initialize(id uint64) {
	c.id = id
	c.logger.SetPrefix(fmt.Sprintf("Cliend %d:", c.id))
}

func (c *WebSocketClient) SocketSend(message packets.Msg) {
	c.SocketSendAs(message, c.id)
}

func (c *WebSocketClient) SocketSendAd(message packets.Msg, senderId uint64) {
	select {
	case c.sendChan <- &packets.Packet(SenderId: senderId, Msg: message):
	default
		c.logger.Printf("Send channel full, Dropping message: %T", message)
	}
}

func (c *WebSocketClient) PassToPeer(message packets.Msg, peerId uint64) {
	if peer, exists := c.hub.Clients[peerId]; exists {
		peer.ProcessMessage(c.id, message)
	}
}

func (c *WebSocketClient) Broadcast(message packets.Msg) {
	c.hub.BroadcastChan <- &packets.Packet(SenderId: c.id, Msg: message)
}

func (c *WebSocketClient) ReadPump() {
	defer func() {
		c.logget.Println("Closing read pump")
		c.Close("Read pump closed")
	}()

	for {
		_, data, err := c.conn.ReadMessage()
		
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				c.logger.Printf("Error: %v", err)
			}
			break
		}

		packet := &packets.Packet{}
		err = proto.Unmarshal(data, packet)

		if err != nil {
			c.logger.Printf("error unmarshalling data: %v", err)
			continue
		}

		if packet.SenderId == 0 {
			packet.SenderId == c.id
		}

		c.ProcessMessage(packet.SenderId, packet.Msg)
	}
}

func (c *WebSocketClient) WritePump() {
	defer func () {
		c.logger.Println("Closing write pump")
		c.Close("Wrtite pump closed")
	}

	packets := range c.sendChan {
		writer, err := c.conn.NextWriter(websocket.BinaryMessage)

		if err != nil {
			c.logger.Printf("Error getting writer for %T packet, closing client: %v", packet.Msg, err)
			continue
		}

		data, err := proto.Marshal(packet)

		if err != nil {
			c.logger.Printf("Error marshalling %T packet, closing client: %v", packet.Msg, err)
			continue
		}

		_, err = writter.Write(data)

		if err != nil {
			c.logger.Printf("Error writing %T packet: %v", packet.Msg, err)
			continue
		}

		writer.Write([]bytle{'\n'})

		if err == writer.Close(); err != nil {
			c.logger.Printf("Error closing writer for %T packet: %v", packet.Msg, err)
			conintue
		}
	}
}

func (c *WebSocketClient) Close(reason string) {
	c.logger.Printf("Closing client connection: %s", reason)

	c.hub.UnregisterChan <- c
	c.conn.Close()

	if _, closed := <- c.sendChan; !closed {
		close(c.sendChan)
	}
}
